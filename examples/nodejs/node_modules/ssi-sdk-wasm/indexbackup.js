const path = require('path');
const fetch = require('isomorphic-fetch');

global.crypto ??= require("crypto");
require('./wasm_exec');

const wasmFilePath = path.join(__dirname, 'main.wasm');

let wasmExports;

if (typeof window === 'undefined') {
  // Node.js environment
  const fs = require('fs');
  const wasmFile = fs.readFileSync(wasmFilePath);
  loadWasm(wasmFile);
} else {
  // Browser environment
  fetch(wasmFilePath)
    .then((response) => response.arrayBuffer())
    .then((wasmFile) => loadWasm(wasmFile));
}

async function loadWasm(wasmFile) {
  const go = new Go();
  const wasmModule = await WebAssembly.compile(wasmFile);
  const wasmInstance = await WebAssembly.instantiate(wasmModule, go.importObject);

  go.run(wasmInstance);
    wasmExports = {makeDid: global.makeDid, resolveDID: global.resolveDID, simpleAdd: global.simpleAdd};
}

function simpleAdd(a, b) {
  if (!wasmExports) {
    throw new Error('Wasm module is not initialized yet.');
  }

  return wasmExports.simpleAdd(a,b);
}

function makeDid() {
  if (!wasmExports) {
    throw new Error('Wasm module is not initialized yet.');
  }

  return wasmExports.makeDid();
}

function resolveDID(didString) {
  if (!wasmExports) {
    throw new Error('Wasm module is not initialized yet.');
  }
  return wasmExports.resolveDID(didString);
}

module.exports = {
    makeDid,
    resolveDID,
    simpleAdd,
};